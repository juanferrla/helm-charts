apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: flask.build.push
  namespace: data-workflows
spec:
  schedule: "25 22 * * *"  # Ejecución cada hora
  concurrencyPolicy: "Forbid"  # Evita que se superpongan ejecuciones
  workflowSpec:
    entrypoint: build-push
    templates:
    - name: build-push
      steps:
      - - name: clone-repo
          template: git-clone
      - - name: build-docker-image
          template: docker-build
      - - name: push-image
          template: docker-push

    # Template para clonar el repositorio Git
    - name: git-clone
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args: 
          - |
            rm -rf /src/* /src/.*
            # Configurar las credenciales de Git usando las variables de entorno
            git config --global credential.helper store
            echo "https://${GIT_USERNAME}:${GIT_TOKEN}@github.com" > ~/.git-credentials
            # Clonar el repositorio
            git clone https://github.com/juanferrla/flask.git /src || exit 1
            ls -lah /src
        env:
        - name: GITHUB_USERNAME
          valueFrom:
            secretKeyRef:
              name: github-secret
              key: username
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: github-secret
              key: token
        volumeMounts:
          - name: workspace
            mountPath: /src

    # Template para construir la imagen Docker
    - name: docker-build
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            echo "Creando imagen flask";
            docker images
            ls -lah /
            echo "listamos /src"
            ls -lah /src/
            docker build -t harbor.juanan.local/default/flask:3.0.0 /src
            echo "Imagen creada";
        volumeMounts:
        - name: workspace
          mountPath: /src
        - name: docker-sock
          mountPath: /var/run/docker.sock  # Montar el socket de Docker


    # Template para subir la imagen a Harbor
    - name: docker-push
      container:
        image: docker:latest
        command: [sh, -c]
        args:
          - |
            echo "$DOCKER_PASSWORD" | docker login harbor.juanan.local -u "$DOCKER_USERNAME" --password-stdin;
            docker push harbor.juanan.local/default/flask:3.0.0;
        env:
          - name: DOCKER_USERNAME
            valueFrom:
              secretKeyRef:
                name: docker-secret
                key: username
          - name: DOCKER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: docker-secret
                key: password
        volumeMounts:
        - name: docker-sock
          mountPath: /var/run/docker.sock  # Montar el socket de Docker
        - name: workspace
          mountPath: /src

    volumes:
    - name: workspace
      persistentVolumeClaim:
        claimName: workspace-pvc
        persistentVolumeReclaimPolicy: Delete
    # Volumen para interactuar con Docker
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
      # Volumen para la configuración del daemon.json
    - name: daemon-config
      configMap:
        name: docker-config
